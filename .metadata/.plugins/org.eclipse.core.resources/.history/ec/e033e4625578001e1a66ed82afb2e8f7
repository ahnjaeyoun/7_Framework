package edu.kh.project.common.aop;

import java.util.Arrays;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component // Bean 추가
@Aspect // 공통 관심사가 작성된 클래스임을 지정
			// Pointcut(타겟지정) + Advice(수행할 코드)
public class BeforeAspect { // Advice (수행할 코드)
	
	private Logger logger = LoggerFactory.getLogger(BeforeAspect.class);
	
	//	execution([접근제한자] 리턴타입	클래스명	메소드명 ([파라미터]))
	// execution(* edu.kh.project..*Impl*.*(..))
	@Before("CommonPointcut.serviceImplPointcut()")
	public void beforeLog(JoinPoint jp) {
		// 매개변수 JoinPoint : AOP의 부가 기능이 적용된 대상의
		// 						객체, 매서드, 파라미터 정보를 얻을 수 있게 해주는 객체
		
		// 대상 객체의 간단한 클래스명(패키지명 제외)
		String className = jp.getTarget().getClass().getSimpleName();
		
		// 메서드 선언부(== 메서드 시그니처)에서 메서드명만 얻어옴
		String methodName = jp.getSignature().getName();
		
		String str = "-------------------------------------\n";
		
		str += "[Strart] : " + className + "-" + methodName + "()\n";
		// [Strart] : MemberServiceImpl - login()
		
		// jp.getArgs() : 파라미터 묶음(배열)
		str += "[Parameter] : " + Arrays.toString(jp.getArgs()) + "\n";
		
		logger.info(str);
		
	}
}
